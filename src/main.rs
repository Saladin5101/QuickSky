use clap::Parser;
// use anyhow::{Result, anyhow};
use std::io::Write;
use std::fs;
use std::io::{self, BufRead};

mod ffi {
    pub mod sys;
}
mod ignore;
mod repo {
    pub mod config;
    pub mod change;
    pub mod commit;
}
mod remote;

#[derive(Parser, Debug)]
#[command(
    name = "sky",
    author = "Saladin5101",
    version = "0.1.0",
    about = "Lazy developer-friendly version control tool",
    long_about = None
)]
enum SkyCmd {
    #[command(about = "Initialize QuickSky repository")]
    Init,
    #[command(about = "Commit and push to remote repository")]
    Upload {
        #[arg(default_value_t = String::new(), help = "Commit message (optional, auto-generated by default)")]
        message: String,
    },
    #[command(about = "View all commit records")]
    Log,
}

fn main() -> anyhow::Result<()> {
    let cmd = SkyCmd::parse();
    match cmd {
        SkyCmd::Init => init()?,
        SkyCmd::Upload { message } => upload(message)?,
        SkyCmd::Log => log()?,
    }
    Ok(())
}

/// Initialize repository
fn init() -> anyhow::Result<()> {
    let repo_root = std::env::current_dir()?;
    let config_path = repo_root.join(".quicksky/config.toml");
    if config_path.exists() {
        return Err(anyhow::anyhow!("Repository already initialized: {:?}", config_path));
    }

    let stdin = io::stdin();
    let mut reader = stdin.lock();

    // Read username
    print!("Enter username: ");
    io::stdout().flush()?;
    let mut name = String::new();
    reader.read_line(&mut name)?;
    let name = name.trim().to_string();

    // Read remote URL
    print!("Enter remote repository URL: ");
    io::stdout().flush()?;
    let mut remote_url = String::new();
    reader.read_line(&mut remote_url)?;
    let remote_url = remote_url.trim().to_string();

    // Read main branch name
    print!("Enter main branch name (default: main): ");
    io::stdout().flush()?;
    let mut branch = String::new();
    reader.read_line(&mut branch)?;
    let branch = branch.trim().to_string();
    let branch = if branch.is_empty() { "main".into() } else { branch };

    // Save configuration
    let config = repo::config::RepoConfig::new(name.clone(), remote_url.clone(), branch.clone());
    config.save(&repo_root)?;

    // Initialize commit record directory
    fs::create_dir_all(repo_root.join(".quicksky/commits"))?;

    println!("\n✅ Initialization successful!");
    println!("User: {} | Remote: {} | Main branch: {}", name, remote_url, branch);
    Ok(())
}

/// Upload changes
fn upload(message: String) -> anyhow::Result<()> {
    let repo_root = std::env::current_dir()?;
    let config = repo::config::RepoConfig::load(&repo_root)?;

    // Generate commit message
    let msg = if message.is_empty() {
        format!("Auto-commit: {}", chrono::Local::now().format("%Y-%m-%d %H:%M"))
    } else {
        message
    };

    // Create local commit
    println!("🔍 Detecting changes...");
    let commit = repo::commit::Commit::create(&repo_root, &config, &msg)?;

    // Push to remote
    println!("📤 Pushing to remote...");
    remote::push(&config.remote, &config.branch.main, &commit)?;

    // Output result
    println!("\n✅ Upload successful!");
    println!("Commit ID: {}", commit.id);
    println!("Message: {}", commit.message);
    Ok(())
}

/// View commit history
fn log() -> anyhow::Result<()> {
    let repo_root = std::env::current_dir()?;
    let commits = repo::commit::Commit::load_all(&repo_root)?;

    if commits.is_empty() {
        return Err(anyhow::anyhow!("No commit records available"));
    }

    println!("📜 Commit history (latest first):");
    for (i, commit) in commits.iter().enumerate() {
        println!("\n[{i}] ID: {}", commit.id);
        println!("   Author: {}", commit.author);
        println!("   Timestamp: {}", commit.timestamp);
        println!("   Message: {}", commit.message);
        println!("   Changes:");
        for (path, status) in &commit.changes {
            let status_str = match status {
                repo::change::FileStatus::Added => "Added",
                repo::change::FileStatus::Modified => "Modified",
                repo::change::FileStatus::Deleted => "Deleted",
            };
            println!("     - {status_str}: {:?}", path);
        }
    }
    Ok(())
}